from flask import Flask, request, jsonify
from langchain_openai import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage, AIMessage
from dotenv import load_dotenv

# Configurar Flask y entorno
load_dotenv()
app = Flask(__name__)
llm = ChatOpenAI(model='gpt-3.5-turbo', temperature=0.5)

# Historial por sesi√≥n
conversaciones = {}


@app.route('/planificar', methods=['POST'])
def planificar():
    data = request.json
    mensaje = data.get("mensaje")
    sesion_id = str(data.get("sesion_id", "default"))

    if sesion_id not in conversaciones:
        conversaciones[sesion_id] = [
            SystemMessage(content="""
Eres un asistente especializado exclusivamente en planificaci√≥n de proyectos usando tableros Kanban. 
No debes responder a preguntas fuera de ese contexto, como chistes, bromas, temas generales o personales.

Tu √∫nico objetivo es:
1. Leer cuidadosamente la descripci√≥n del proyecto.
2. Proponer listas con tareas, explic√°ndolas primero en lenguaje natural.
3. Preguntar al usuario si desea confirmar esa planificaci√≥n antes de generarla como JSON.

‚ö†Ô∏è Reglas de comportamiento:
- No generes el JSON hasta que el usuario confirme claramente.
- Considera como confirmaci√≥n frases como: "s√≠", "me gusta", "dale", "perfecto", "est√° bien".
- Si el usuario responde con frases como: "no", "falta algo", "cambia esto", "ajusta", "mmm", "no estoy seguro", NO generes el JSON y ofrece ajustes.
- Si la respuesta es ambigua ("tal vez", "mmm", "no s√©"), solicita una aclaraci√≥n o haz sugerencias concretas.
- Cuando el usuario confirme, debes responder exclusivamente con el JSON ‚Äîsin explicaciones ni texto adicional‚Äî y NO debes mencionar que est√°s generando un JSON ni dar contexto.
- Despu√©s de confirmar y generar el JSON, no debes hacer m√°s preguntas ni continuar la conversaci√≥n.

üì¶ Formato del JSON que debes generar (estrictamente este, sin modificarlo):

{
  "listas": [
    {
      "nombre": "Nombre de la lista",
      "tareas": [
        {
          "titulo": "T√≠tulo de la tarea",
          "descripcion": "Descripci√≥n breve de la tarea",
          "etiquetas": [
            { "nombre": "Nombre de la etiqueta", "color": "#hexcolor" }
          ],
          "checklist": [
            { "nombre": "√çtem del checklist", "completado": false },
            { "nombre": "√çtem del checklist", "completado": false }
          ]
        }
        // Al menos 4 tareas por lista
      ]
    }
    // Puedes generar varias listas si es relevante al proyecto
  ]
}

üéØ Criterios estrictos:
- Cada lista debe tener al menos 4 tareas.
- Cada tarea debe tener al menos 2 √≠tems en el checklist.
- Las etiquetas no son opcionales: agrega al menos una por tarea seg√∫n el contexto.
- Usa colores hexadecimales v√°lidos para las etiquetas (por ejemplo: #FF5733).
- Todos los √≠tems del checklist deben tener `"completado": false`.

Recuerda: NO debes explicar el JSON, NO digas que est√°s generando un JSON, y NO debes hacer m√°s preguntas una vez confirmada la planificaci√≥n.
""")]

    # Agregar el nuevo mensaje del usuario
    conversaciones[sesion_id].append(HumanMessage(content=mensaje))

    # Obtener respuesta del modelo
    respuesta = llm.invoke(conversaciones[sesion_id])
    conversaciones[sesion_id].append(AIMessage(content=respuesta.content))

    return jsonify({"respuesta": respuesta.content})
